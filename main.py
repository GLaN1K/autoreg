import os
import re
import sys
import time
import json
import requests
import random as r

from loguru import logger
from selenium import webdriver
from collections import OrderedDict
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException


def main_func():
    logger.remove()
    # –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    def debug_only(record):
        return record["level"].name == "DEBUG"

    def critical_only(record):
        return record["level"].name == "CRITICAL"

    def info_only(record):
        return record["level"].name == "INFO"

    logger_format_debug = "<green>{time:DD-MM-YY HH:mm:ss}</> | <bold><blue>{level}</></> | <cyan>{file}:{function}:{line}</> | <blue>{message}</> | <blue>üõ†</>"
    logger_format_info = "<green>{time:DD-MM-YY HH:mm:ss}</> | <bold><fg 255,255,255>{level}</></> | <cyan>{file}:{function}:{line}</> | <fg 255,255,255>{message}</> | <fg 255,255,255>‚úî</>"
    logger_format_critical = "<green>{time:DD-MM-YY HH:mm:ss}</> | <RED><fg 255,255,255>{level}</></> | <cyan>{file}:{function}:{line}</> | <fg 255,255,255><RED>{message}</></> | <RED><fg 255,255,255>‚ùå</></>"

    logger.add(sys.stderr, format=logger_format_debug, level='DEBUG', filter=debug_only)
    logger.add(sys.stderr, format=logger_format_info, level='INFO', filter=info_only)
    logger.add(sys.stderr, format=logger_format_critical, level='CRITICAL', filter=critical_only)
    # logger.add('myfile.log', format=logger_format_debug, level='DEBUG', filter=debug_only)

    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

    countries_codes_dict, dict, proxies_dict, numbers_of_countries_list = {}, {}, {}, []
    ID, phone_numbers, sms_code = None, None, None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª. –ï—Å–ª–∏ –¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–µ–π

    def type_proxy():
        with open('.' + os.path.join(os.sep, 'yourfiles', 'proxies.txt'), 'r', encoding='utf-8-sig',
                  errors='ignore') as proxies_file:
            for line in proxies_file:
                proxies_list = line.strip('\n').split(':')
                if len(proxies_list) == 2:
                    return 'simple proxy'
                elif len(proxies_list) == 4:
                    return 'private proxy'
                else:
                    logger.critical('–¢–∏–ø –ø—Ä–æ–∫—Å–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')

    def proxy_get():
        if os.path.getsize('.' + os.path.join(os.sep, 'yourfiles', 'proxies.txt')) > 0:
            if type_proxy() == 'private proxy':
                logger.debug('–¢–∏–ø –≤–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏ - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π')
                with open('.' + os.path.join(os.sep, 'yourfiles', 'proxies.txt'), 'r', encoding='utf-8-sig',
                          errors='ignore') as proxies_file:
                    line = proxies_file.readline()
                    proxies_list = line.strip('\n').split(':')
                    login_proxy = proxies_list[0]
                    password_proxy = proxies_list[1]
                    ip_proxy = proxies_list[2]
                    port_proxy = proxies_list[3]

                    options = webdriver.ChromeOptions()
                    PROXY = ip_proxy + ':' + port_proxy
                    options.add_extension("Proxy_Auto_Auth.crx")
                    options.add_argument("--proxy-server=http://{}".format(PROXY))

                    driver = webdriver.Chrome(options=options)

                    driver.get("chrome-extension://ggmdpepbjljkkkdaklfihhngmmgmpggp/options.html")

                    driver.find_element_by_id("login").send_keys(login_proxy)
                    driver.find_element_by_id("password").send_keys(password_proxy)
                    driver.find_element_by_id("retry").clear()
                    driver.find_element_by_id("retry").send_keys("2")
                    driver.find_element_by_id("save").click()
                    logger.debug('–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω')

                    return driver

            else:
                logger.debug('–¢–∏–ø –≤–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏ - –æ—Ç–∫—Ä—ã—Ç—ã–π')
                with open('.' + os.path.join(os.sep, 'yourfiles', 'proxies.txt'), 'r', encoding='utf-8',
                          errors='ignore') as proxies_file:
                    line = proxies_file.readline()
                    chrome_options = webdriver.ChromeOptions()
                    chrome_options.add_argument('--proxy-server=%s' % line)
                    driver = webdriver.Chrome(options=chrome_options)
                    return driver

        else:
            logger.debug('–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –Ω–∏–∫–∞–∫–æ–≥–æ –ø—Ä–æ–∫—Å–∏')
            return webdriver.Chrome

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ proxies.txt

    exist_proxies_file_check = os.path.exists('.' + os.path.join(os.sep, 'yourfiles', 'proxies.txt'))

    # –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±–µ—Ä–µ–º –∏–Ω—Ñ—É

    def proxy_main():

        if exist_proxies_file_check == True:
            logger.debug('–§–∞–π–ª "proxies.txt" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

        # –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ login:pass:ip:port –ø—Ä–æ–∫—Å–∏

        else:
            logger.info('proxies.txt –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ txtfiles')
            with open('.' + os.path.join(os.sep, 'yourfiles', 'proxies.txt'), 'w') as proxies_file:
                logger.info(
                    '–ù–∏–∂–µ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ login:pass:ip:port. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ - –Ω–∞–∂–º–∏—Ç–µ Enter')
                proxies_str = input()
                proxies_file.write(proxies_str)
                proxies_file.close()
        return proxy_get()

    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞

    driver = proxy_main()

    def send_keys(xpath, keys):
        driver.find_element_by_xpath(xpath).send_keys(keys)

    def clear(xpath):
        return driver.find_element_by_xpath(xpath).clear()

    def click(xpath):
        return driver.find_element_by_xpath(xpath).click()

    # –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–º–µ—Ä–∞

    def get_status():
        payload_get_code = {'api_key': f'{token}', 'action': 'getStatus', 'id': f'{ID}'}
        response = requests.get('https://sms-activate.ru/stubs/handler_api.php',
                                params=payload_get_code)
        return response

    # –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—à–µ–¥—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞

    def response_analise(response):
        if 'STATUS_OK' in response.text:
            logger.debug(f'–°–º—Å –ø—Ä–∏—à–ª–æ. –ö–æ–¥: {response.text}')
            return response.text
        elif response.text == 'STATUS_WAIT_CODE':
            logger.debug('–û–∂–∏–¥–∞–µ–º —Å–º—Å')
            return False
        elif response.text == 'NO_BALANCE':
            logger.critical('–î–µ–Ω–µ–≥ –Ω–µ—Ç')
            return False
        elif response.text == 'NO_NUMBERS':
            logger.debug('–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤')
            return 'NO_NUMBERS'
        elif response.text == 'BAD_KEY':
            logger.critical('–¢–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ inf.txt –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
            return False
        elif 'ACCESS_NUMBER' in response.text:
            return 'ACCESS_NUMBER'
        elif 'BAD_STATUS' in response.text:
            logger.critical('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å ID –æ–ø–µ—Ä–∞—Ü–∏–∏')
            return False
        else:
            logger.critical(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—Ç–≤–µ—Ç sms-activate: {response.text}')
            return False

    # –ø—Ä–∏–µ–º –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ–¥–∞ —Å–º—Å

    def response_next(self):
        sms_code = response_analise(get_status())
        if sms_code == False:
            return False
        else:
            sms_code = sms_code.split(':')[1]
            return sms_code

    def country_get():

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ñ–∞–π–ª–∏–∫–µ –∑–∞–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–¥–±–æ—Ä–æ–º –¥–µ—à–µ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã:
        if country_name_from_inf == 'False':
            country_code_final = number_of_the_cheapest_country
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–¥–±–æ—Ä–æ–º –¥–µ—à–µ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã:
        else:
            country_code_final = country_code_from_user

        # –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞

        logger.debug(f'–ë–µ—Ä–µ–º —Å—Ç—Ä–∞–Ω—É: {country_name_from_inf} —Å –Ω–æ–º–µ—Ä–æ–º: {country_code_final}')
        payload = {'api_key': f'{token}', 'action': 'getNumber', 'service': 'vk', 'operator': 'any',
                   'country': f'{country_code_final}'}
        g = requests.get('https://sms-activate.ru/stubs/handler_api.php', params=payload)

        if response_analise(g) == 'ACCESS_NUMBER':
            pass

        # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç

        elif response_analise(g) == 'NO_NUMBERS':
            payload_number_is_ready_request = {'api_key': f'{token}', 'action': 'setStatus', 'status': '8',
                                               'id': f'{ID}'}
            number_is_ready_request = requests.post('https://sms-activate.ru/stubs/handler_api.php',
                                                    params=payload_number_is_ready_request)
            logger.info(f'–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {number_is_ready_request.text}')
            logger.debug('–ë–µ—Ä–µ–º –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É')

                country_get()  # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –±–µ—Ä–µ—Ç

        else:
            sys.exit()  # –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞

        result = re.split(r':', g.text)

        # —Ä–∞–∑–±–∏–≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ—ã –Ω–∞ ID –∏ –Ω–æ–º–µ—Ä

        ID = result[1]
        phone_numbers = re.findall(r'\d{10}$', result[2])[0]
        logger.debug(f'–ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä: {phone_numbers} –∏ ID –æ–ø–µ—Ä–∞—Ü–∏–∏: {ID}')

        # –ù–∞—Ö–æ–¥–∏–º –∏ –≤–≤–æ–¥–∏–º —Å—Ç—Ä–∞–Ω—É

        clear('//input[@class="selector_input selected"]')
        send_keys('//input[@class="selector_input selected"]', country_name_from_inf)
        send_keys('//td[@class="selector"]/input[@type="text"]', u'\ue007')

        # –Ω–∞—Ö–æ–¥–∏–º –∏ –≤–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –≤—ã—Ä–µ–∑–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º

        clear('//div[@class="prefix_input_field"]/input[@id="join_phone"]')
        send_keys('//div[@class="prefix_input_field"]/input[@id="join_phone"]', phone_numbers)

        # Ctrl+A, Ctrl+X, Ctrl+V —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞:

        # ActionChains(driver).key_down(Keys.CONTROL).send_keys('a').key_up(Keys.CONTROL).perform()
        # ActionChains(driver).key_down(Keys.CONTROL).send_keys('x').key_up(Keys.CONTROL).perform()
        # ActionChains(driver).key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()

        # –Ω–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"

        click('//button[@id="join_send_phone"]')

        # –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –æ–∫–Ω–∞ "—è –Ω–µ —Ä–æ–±–æ—Ç": //div[@class="popup_box_container"]

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏—è div "–ù–æ–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        time.sleep(1)

        try:
            driver.find_element_by_xpath("//div[@class='msg_text']")
            logger.info('–í–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –Ω–æ–º–µ—Ä')
            payload_number_is_ready_request = {'api_key': f'{token}', 'action': 'setStatus', 'status': '8',
                                               'id': f'{ID}'}
            number_is_ready_request = requests.post('https://sms-activate.ru/stubs/handler_api.php',
                                                    params=payload_number_is_ready_request)
            logger.debug(f'–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {number_is_ready_request.text}')
            logger.debug('–ë–µ—Ä–µ–º –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É')

            ID, phone_numbers = country_get()  # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –±–µ—Ä–µ—Ç

        except NoSuchElementException:
            logger.debug('–í–∫ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –Ω–æ–º–µ—Ä')
            pass

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏—è div "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"

        try:
            driver.find_element_by_xpath("//div[@class='msg error']")
            logger.info('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')

            payload_number_is_ready_request = {'api_key': f'{token}', 'action': 'setStatus', 'status': '8',
                                               'id': f'{ID}'}
            number_is_ready_request = requests.post('https://sms-activate.ru/stubs/handler_api.php',
                                                    params=payload_number_is_ready_request)
            logger.debug('–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ', number_is_ready_request.text)

            ID, phone_numbers = country_get()  # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É –±–µ—Ä–µ—Ç

        except NoSuchElementException:
            logger.debug('–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–∫')
            pass

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–ª–æ–∫–∞ "–ú—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã—Å–ª–∞–ª–∏ –≤–∞–º —Å–º—Å —Å –∫–æ–¥–æ–º", –Ω–∞–¥–ø–∏—Å–∏ "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥" –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª –∫–æ–¥"

        send_code_button = driver.find_element_by_xpath("//div[@id='join_code_row']")

        if send_code_button.is_displayed() == True:
            logger.debug('Div, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥" –¥–æ—Å—Ç—É–ø–µ–Ω')
        else:
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é —Å–º—Å"
            logger.debug('–û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é —Å–º—Å')
            WebDriverWait(driver, 140).until(EC.presence_of_element_located((By.XPATH, "//a[@id='join_resend_lnk']")))

            # –∫–ª–∏–∫ –ø–æ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é —Å–º—Å"

            click('//a[@id="join_resend_lnk"]')
            logger.debug('–ù–∞–∂–∞–ª "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é —Å–º—Å"')

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: –Ω–æ–º–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–º—Å

        payload_number_is_ready_request = {'api_key': f'{token}', 'action': 'setStatus', 'status': '1', 'id': f'{ID}'}
        number_is_ready_request = requests.post('https://sms-activate.ru/stubs/handler_api.php',
                                                params=payload_number_is_ready_request)
        logger.debug(f'–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {number_is_ready_request.text}')

        return ID, phone_numbers

    # —É–¥–∞–ª—è–µ–º –∫—É–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

    driver.delete_all_cookies()
    driver.get('https://vk.com/')

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ login, pass.txt

    exist_loginpass_file_check = os.path.exists('.' + os.path.join(os.sep, 'yourfiles', 'login, pass.txt'))

    if exist_loginpass_file_check == True:
        logger.debug('–§–∞–π–ª "login, pass.txt" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        pass
    else:
        open('.' + os.path.join(os.sep, 'yourfiles', 'login, pass.txt'), 'w', encoding='utf-8')
        logger.info('–§–∞–π–ª "login, pass.txt" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π')

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ inf.txt

    exist_inf_file_check = os.path.exists('.' + os.path.join(os.sep, 'yourfiles', 'inf.txt'))

    # –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±–µ—Ä–µ–º –∏–Ω—Ñ—É

    if exist_inf_file_check == True:
        logger.debug('–§–∞–π–ª "inf.txt" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        with open('.' + os.path.join(os.sep, 'yourfiles', 'inf.txt'), 'r', encoding='utf-8-sig',
                  errors='ignore') as url_inf:
            for line in url_inf:
                list_inf = line.strip('\n').split(':')
                dict[list_inf[0]] = list_inf[1]

    # –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω—ã

    else:
        logger.info('inf.txt –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ txtfiles')
        with open('.' + os.path.join(os.sep, 'yourfiles', 'inf.txt'), 'w', encoding='utf-8-sig') as url_inf:
            logger.info('–ù–∏–∂–µ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ sms-activate')
            token = input()
            logger.info(
                '–ù–∏–∂–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å. –° –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:')
            country_name = input()
            url_inf.write(f'token:{token}\n'
                          f'country_name:{country_name}\n'
                          '–ü–æ–¥—Å–∫–∞–∑–∫–∞:–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã —Å —Å–∞–º–æ–π –¥–µ—à–µ–≤–æ–π —Ü–µ–Ω–æ–π –Ω–æ–º–µ—Ä–∞, –∑–∞–¥–∞–π—Ç–µ country_name –∑–Ω–∞—á–µ–Ω–∏–µ False')
            url_inf.close()

            with open('.' + os.path.join(os.sep, 'yourfiles', 'inf.txt'), 'r', encoding='utf-8-sig') as url_inf:
                for line in url_inf:
                    list_inf = line.strip().split(':')
                    dict[list_inf[0]] = list_inf[1]
    token = dict['token']
    logger.debug(f'–†–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ inf.txt, –≤–∑—è–ª–∏ –∏–∑ –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω: {token}')
    country_name_from_inf = dict.get('country_name')

    # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω

    with open('.' + os.path.join(os.sep, 'txtfiles', 'countries_code.txt'), 'r', encoding='utf-8-sig',
              errors='ignore') as countries_codes_file:
        for line in countries_codes_file:
            list_inf = line.strip().split(':')
            countries_codes_dict[list_inf[1]] = list_inf[0]
    logger.debug('–†–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω')
    country_code_from_user = countries_codes_dict[country_name_from_inf]

    # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–º–µ–Ω –∏ —Ñ–∞–º–∏–ª–∏–π

    name_list = []
    surname_list = []

    # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏ –∏—Ö txt-—Å–ø–∏—Å–∫–æ–≤ python —Å–ø–∏—Å–∫–∏ –∏ –¥–µ–ª–∞–µ–º –∏—Ö —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    with open('.' + os.path.join(os.sep, 'txtfiles', 'name_rus.txt'), 'r', encoding='utf-8-sig',
              errors='ignore') as inf:
        for eachLine in inf:
            a = eachLine.capitalize().strip().split("\n")
            name_list.append(a)

    with open('.' + os.path.join(os.sep, 'txtfiles', 'surname.txt'), 'r', encoding='utf-8-sig', errors='ignore') as inf:
        for eachLine in inf:
            a = eachLine.capitalize().strip().split("\n")
            surname_list.append(a)

    logger.debug('–†–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏')

    # —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∏–Ω–ø—É—Ç—ã

    name = r.choice(name_list)
    name = name[0]
    surname = r.choice(surname_list)
    surname = surname[0]
    send_keys('//input[@id="ij_first_name"]', name)
    send_keys('//input[@id="ij_last_name"]', surname)

    # –Ω–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–ª—é "–¥–µ–Ω—å", –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–Ω—å –æ—Ç 1 –¥–æ 28. –ö–ª–∏–∫–∞–µ–º

    click("//div[@id='container1']")
    day_random_count = r.randint(1, 28)
    day_count = driver.find_element_by_xpath(
        "//ul[@id='list_options_container_1']/li[text() = '%s']" % day_random_count)
    day_count.click()

    # –Ω–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–ª—é "–º–µ—Å—è—Ü", –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–µ—Å—è—Ü. –ö–ª–∏–∫–∞–µ–º

    click("//div[@id='container2']")
    months_list = ['–Ø–Ω–≤–∞—Ä—è', '–§–µ–≤—Ä–∞–ª—è', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä–µ–ª—è', '–ú–∞—è', '–ò—é–Ω—è', '–ò—é–ª—è', '–ê–≤–≥—É—Å—Ç–∞', '–°–µ–Ω—Ç—è–±—Ä—è', '–û–∫—Ç—è–±—Ä—è',
                   '–ù–æ—è–±—Ä—è', '–î–µ–∫–∞–±—Ä—è']
    month = r.choice(months_list)
    month_li = driver.find_element_by_xpath("//ul[@id='list_options_container_2']/li[text() = '%s']" % month)
    month_li.click()

    # –Ω–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–ª—é "–≥–æ–¥", –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –≥–æ–¥ –æ—Ç 1980 –¥–æ 2001. –ö–ª–∏–∫–∞–µ–º

    click("//div[@id='container3']")
    year_random_count = r.randint(1980, 2001)
    year_li = driver.find_element_by_xpath("//ul[@id='list_options_container_3']/li[text() = '%s']" % year_random_count)
    year_li.click()

    logger.debug('–ó–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ª—è –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏, –¥–Ω—è, –º–µ—Å—è—Ü–∞, –≥–æ–¥–∞')

    # –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"

    click("//button[@id='ij_submit']")
    time.sleep(1)
    logger.debug('–ù–∞–∂–∞–ª–∏ "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"')

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    reg_url = driver.current_url
    if reg_url == "https://vk.com/":
        tab_index = r.randint(-1, 0)
        sex_div = driver.find_element_by_xpath("//div[@id='ij_sex_row']/div[@tabindex='%s']" % tab_index)
        sex_div.click()
        click("//button[@id='ij_submit']")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Å–∞–º–æ–π –¥–µ—à–µ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã

    if country_name_from_inf != 'False':  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ñ–∞–π–ª–∏–∫–µ inf.txt –∑–∞–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
        logger.debug('–ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã —Å —Å–∞–º—ã–º –¥–µ—à–µ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –æ—Ç–∫–ª—é—á–µ–Ω')
        pass

    else:

        # –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –Ω–æ–º–µ—Ä
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –Ω–æ–º–µ—Ä–∞—Ö

        payload = {'api_key': f'{token}', 'action': 'getPrices', 'service': 'vk', 'operator': 'any'}
        g = requests.get('https://sms-activate.ru/stubs/handler_api.php', params=payload)
        response_dic = json.loads(g.text.replace("'", '"'))  # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤ json, —á—Ç–æ–± —Å–¥–µ–ª–∞—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º

        # —Å–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏–∫: {–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω—ã: —Ü–µ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã}

        number_cost_dic = {}
        for elem in response_dic:
            if response_dic[elem] == {}:  # –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —ç—Ç–∞ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞—Ä—è
                continue
            else:
                if response_dic[elem]['vk']['count'] < 10:  # –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–∞ –∏ 10 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
                    continue
                else:
                    number_cost_dic[elem] = response_dic[elem]['vk'][
                        'cost']  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∑–Ω–∞—á–µ–Ω–∏—è

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã —Å—Ç—Ä–∞–Ω

        ordered_number_cost_dic = OrderedDict(
            sorted(number_cost_dic.items(), key=lambda t: t[1]))

        # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è —Ü–µ–Ω—ã

        for number_of_country in ordered_number_cost_dic:
            numbers_of_countries_list.append(number_of_country)

        logger.debug(f'—Å–æ–∑–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è —Ü–µ–Ω—ã: {numbers_of_countries_list}')

        number_of_the_cheapest_country = numbers_of_countries_list[0]  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ª–æ–≤–∞—Ä–∏–∫–∞
        numbers_of_countries_list.remove(number_of_the_cheapest_country)  # —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ª–æ–≤–∞—Ä–∏–∫–∞
        logger.debug(number_of_the_cheapest_country)

    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É

    ID, phone_numbers = country_get()

    # –∂–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç –∫–æ–¥

    try:
        WebDriverWait(driver, 300, 30).until(response_next, "—Å–º—Å–∫–∞ –ø—Ä–∏—à–ª–∞???")
    except TimeoutException:
        click('//a[@id="join_other_phone"]')
        logger.info('–ù–∞–∂–∞–ª –Ω–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"')

        payload_number_is_ready_request = {'api_key': f'{token}', 'action': 'setStatus', 'status': '8', 'id': f'{ID}'}
        number_is_ready_request = requests.post('https://sms-activate.ru/stubs/handler_api.php',
                                                params=payload_number_is_ready_request)
        logger.debug(f'–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {number_is_ready_request.text}')

        logger.debug('–ë–µ—Ä—É –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É, –∏–±–æ –≤—Ä–µ–º—è –≤—ã—à–ª–æ')
        ID, phone_numbers = country_get()

    # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º sms_code –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—à–µ–¥—à–µ–≥–æ –∫–æ–¥–∞

    sms_code = response_next(driver)

    # –≤–≤–æ–¥–∏–º –∫–æ–¥ –≤ input "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥"

    send_keys('//input[@id="join_code"]', sms_code)

    time.sleep(1)

    # –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"

    click('//button[@id="join_send_code"]')

    time.sleep(1)

    phone_numbers_str = str(phone_numbers)

    # –≤–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å

    password = ''.join(
        [r.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM')) for x in range(12)])
    send_keys('//input[@id="join_pass"]', password)

    # –∫–ª–∏–∫ "–í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"

    click("//button[@id='join_send_pass']")

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª–∏–∫ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å

    login_pass = name + '&' + surname + '#' + phone_numbers_str + ':' + password
    with open('.' + os.path.join(os.sep, 'yourfiles', 'login, pass.txt'), 'a') as passLoginFile:
        passLoginFile.writelines('\n' + login_pass)
    logger.debug(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ autoreg/txtfiles/login, pass.txt')
    logger.debug(f'–ê–∫–∫–∞—É–Ω—Ç: {login_pass}')

    # –ù–∞–∂–∏–º–∞–µ–º "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

    time.sleep(2)
    click('//a[@class="join_skip_link"]')


main_func()
